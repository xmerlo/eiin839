//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BikingHeavyClient.RoutingWithBikes {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RoutingWithBikes.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRestStationsAndItinary", ReplyAction="http://tempuri.org/IService1/GetRestStationsAndItinaryResponse")]
        System.IO.Stream GetRestStationsAndItinary(double lat, double lon, double lat2, double lon2, string startAdress, string goalAdress, int distanceLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRestStationsAndItinary", ReplyAction="http://tempuri.org/IService1/GetRestStationsAndItinaryResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> GetRestStationsAndItinaryAsync(double lat, double lon, double lat2, double lon2, string startAdress, string goalAdress, int distanceLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSoapStationsAndItinary", ReplyAction="http://tempuri.org/IService1/GetSoapStationsAndItinaryResponse")]
        string GetSoapStationsAndItinary(double lat, double lon, double lat2, double lon2, string startAdress, string goalAdress, int distanceLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSoapStationsAndItinary", ReplyAction="http://tempuri.org/IService1/GetSoapStationsAndItinaryResponse")]
        System.Threading.Tasks.Task<string> GetSoapStationsAndItinaryAsync(double lat, double lon, double lat2, double lon2, string startAdress, string goalAdress, int distanceLimit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStatistics", ReplyAction="http://tempuri.org/IService1/GetStatisticsResponse")]
        string GetStatistics();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStatistics", ReplyAction="http://tempuri.org/IService1/GetStatisticsResponse")]
        System.Threading.Tasks.Task<string> GetStatisticsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : BikingHeavyClient.RoutingWithBikes.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<BikingHeavyClient.RoutingWithBikes.IService1>, BikingHeavyClient.RoutingWithBikes.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.IO.Stream GetRestStationsAndItinary(double lat, double lon, double lat2, double lon2, string startAdress, string goalAdress, int distanceLimit) {
            return base.Channel.GetRestStationsAndItinary(lat, lon, lat2, lon2, startAdress, goalAdress, distanceLimit);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> GetRestStationsAndItinaryAsync(double lat, double lon, double lat2, double lon2, string startAdress, string goalAdress, int distanceLimit) {
            return base.Channel.GetRestStationsAndItinaryAsync(lat, lon, lat2, lon2, startAdress, goalAdress, distanceLimit);
        }
        
        public string GetSoapStationsAndItinary(double lat, double lon, double lat2, double lon2, string startAdress, string goalAdress, int distanceLimit) {
            return base.Channel.GetSoapStationsAndItinary(lat, lon, lat2, lon2, startAdress, goalAdress, distanceLimit);
        }
        
        public System.Threading.Tasks.Task<string> GetSoapStationsAndItinaryAsync(double lat, double lon, double lat2, double lon2, string startAdress, string goalAdress, int distanceLimit) {
            return base.Channel.GetSoapStationsAndItinaryAsync(lat, lon, lat2, lon2, startAdress, goalAdress, distanceLimit);
        }
        
        public string GetStatistics() {
            return base.Channel.GetStatistics();
        }
        
        public System.Threading.Tasks.Task<string> GetStatisticsAsync() {
            return base.Channel.GetStatisticsAsync();
        }
    }
}
